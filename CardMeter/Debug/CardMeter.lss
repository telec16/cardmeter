
CardMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000079d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000540  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e9  00008540  00000540  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000079d  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029ff  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fc6  00000000  00000000  00003317  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac3  00000000  00000000  000052dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00005da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e4c  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b3  00000000  00000000  00006dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000076af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	22 01       	movw	r4, r4
  7e:	26 01       	movw	r4, r12
  80:	2a 01       	movw	r4, r20
  82:	2e 01       	movw	r4, r28
  84:	32 01       	movw	r6, r4
  86:	36 01       	movw	r6, r12
  88:	3a 01       	movw	r6, r20
  8a:	3e 01       	movw	r6, r28

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	cd bf       	out	0x3d, r28	; 61
  94:	df e3       	ldi	r29, 0x3F	; 63
  96:	de bf       	out	0x3e, r29	; 62
  98:	0e 94 42 01 	call	0x284	; 0x284 <main>
  9c:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <parse>:
			*ch1 = val;
	}
}

boolean parse(uint32_t data, ADC_CHN_t *chn, ADC_STATUS_t *status, uint32_t *value)
{
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	da 01       	movw	r26, r20
  b2:	f9 01       	movw	r30, r18
	*chn = ((data>>ADC_CHN)&1) ? CH1:CH0;
  b4:	9b 01       	movw	r18, r22
  b6:	ac 01       	movw	r20, r24
  b8:	01 2e       	mov	r0, r17
  ba:	1e e1       	ldi	r17, 0x1E	; 30
  bc:	56 95       	lsr	r21
  be:	47 95       	ror	r20
  c0:	37 95       	ror	r19
  c2:	27 95       	ror	r18
  c4:	1a 95       	dec	r17
  c6:	d1 f7       	brne	.-12     	; 0xbc <parse+0x18>
  c8:	10 2d       	mov	r17, r0
  ca:	21 70       	andi	r18, 0x01	; 1
  cc:	2c 93       	st	X, r18
	
	status->SIG = (data>>ADC_SIG) & 1;
  ce:	9b 01       	movw	r18, r22
  d0:	ac 01       	movw	r20, r24
  d2:	01 2e       	mov	r0, r17
  d4:	1d e1       	ldi	r17, 0x1D	; 29
  d6:	56 95       	lsr	r21
  d8:	47 95       	ror	r20
  da:	37 95       	ror	r19
  dc:	27 95       	ror	r18
  de:	1a 95       	dec	r17
  e0:	d1 f7       	brne	.-12     	; 0xd6 <parse+0x32>
  e2:	10 2d       	mov	r17, r0
  e4:	21 70       	andi	r18, 0x01	; 1
  e6:	20 83       	st	Z, r18
	status->EXR = (data>>ADC_EXR) & 1;
  e8:	9b 01       	movw	r18, r22
  ea:	ac 01       	movw	r20, r24
  ec:	01 2e       	mov	r0, r17
  ee:	1c e1       	ldi	r17, 0x1C	; 28
  f0:	56 95       	lsr	r21
  f2:	47 95       	ror	r20
  f4:	37 95       	ror	r19
  f6:	27 95       	ror	r18
  f8:	1a 95       	dec	r17
  fa:	d1 f7       	brne	.-12     	; 0xf0 <parse+0x4c>
  fc:	10 2d       	mov	r17, r0
  fe:	21 70       	andi	r18, 0x01	; 1
 100:	21 83       	std	Z+1, r18	; 0x01
	status->subLSBs = data & 0b1111;
 102:	26 2f       	mov	r18, r22
 104:	2f 70       	andi	r18, 0x0F	; 15
 106:	22 83       	std	Z+2, r18	; 0x02
	
	*value = (data>>ADC_VALUE) & 0xFFFFFF;
 108:	6b 01       	movw	r12, r22
 10a:	7c 01       	movw	r14, r24
 10c:	68 94       	set
 10e:	13 f8       	bld	r1, 3
 110:	f6 94       	lsr	r15
 112:	e7 94       	ror	r14
 114:	d7 94       	ror	r13
 116:	c7 94       	ror	r12
 118:	16 94       	lsr	r1
 11a:	d1 f7       	brne	.-12     	; 0x110 <parse+0x6c>
 11c:	ff 24       	eor	r15, r15
 11e:	f8 01       	movw	r30, r16
 120:	c0 82       	st	Z, r12
 122:	d1 82       	std	Z+1, r13	; 0x01
 124:	e2 82       	std	Z+2, r14	; 0x02
 126:	f3 82       	std	Z+3, r15	; 0x03
	
	return !((data>>ADC_EOC) & 1);
 128:	dc 01       	movw	r26, r24
 12a:	cb 01       	movw	r24, r22
 12c:	80 95       	com	r24
 12e:	90 95       	com	r25
 130:	a0 95       	com	r26
 132:	b0 95       	com	r27
 134:	88 27       	eor	r24, r24
 136:	b7 fd       	sbrc	r27, 7
 138:	83 95       	inc	r24
 13a:	99 27       	eor	r25, r25
 13c:	aa 27       	eor	r26, r26
 13e:	bb 27       	eor	r27, r27
}
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	df 90       	pop	r13
 14a:	cf 90       	pop	r12
 14c:	08 95       	ret

0000014e <ready>:

boolean ready()
{
	boolean r = FALSE;

	_CLR(VPORTC.OUT, CS);
 14e:	48 98       	cbi	0x09, 0	; 9
	r = _GET(VPORTA.IN, SDO);
 150:	82 b1       	in	r24, 0x02	; 2
	_SET(VPORTC.OUT, CS);
 152:	48 9a       	sbi	0x09, 0	; 9

	return r;
}
 154:	82 fb       	bst	r24, 2
 156:	88 27       	eor	r24, r24
 158:	80 f9       	bld	r24, 0
 15a:	08 95       	ret

0000015c <readAll>:
uint32_t readAll()
{
	uint8_t i;
	uint32_t data=0;

	_CLR(VPORTA.OUT, SCK);
 15c:	0b 98       	cbi	0x01, 3	; 1
	_CLR(VPORTC.OUT, CS);
 15e:	48 98       	cbi	0x09, 0	; 9
 160:	30 e2       	ldi	r19, 0x20	; 32
}

uint32_t readAll()
{
	uint8_t i;
	uint32_t data=0;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	dc 01       	movw	r26, r24
	_CLR(VPORTA.OUT, SCK);
	_CLR(VPORTC.OUT, CS);

	for(i=0; i<32; i++)
	{
		_SET(VPORTA.OUT, SCK);
 168:	0b 9a       	sbi	0x01, 3	; 1
		_CLR(VPORTA.OUT, SCK);
 16a:	0b 98       	cbi	0x01, 3	; 1
		data = (data<<1) | _GET(VPORTA.IN, SDO);
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	aa 1f       	adc	r26, r26
 172:	bb 1f       	adc	r27, r27
 174:	22 b1       	in	r18, 0x02	; 2
 176:	22 fb       	bst	r18, 2
 178:	22 27       	eor	r18, r18
 17a:	20 f9       	bld	r18, 0
 17c:	82 2b       	or	r24, r18
 17e:	31 50       	subi	r19, 0x01	; 1
	uint32_t data=0;

	_CLR(VPORTA.OUT, SCK);
	_CLR(VPORTC.OUT, CS);

	for(i=0; i<32; i++)
 180:	99 f7       	brne	.-26     	; 0x168 <readAll+0xc>
		_SET(VPORTA.OUT, SCK);
		_CLR(VPORTA.OUT, SCK);
		data = (data<<1) | _GET(VPORTA.IN, SDO);
	}

	_SET(VPORTC.OUT, CS);
 182:	48 9a       	sbi	0x09, 0	; 9

	return data;
}
 184:	bc 01       	movw	r22, r24
 186:	cd 01       	movw	r24, r26
 188:	08 95       	ret

0000018a <getData>:
#define SCK 3//PA3
#define SDO 2//PA2
#define CS 0//PC0

void getData(uint32_t *ch0, uint32_t *ch1)
{
 18a:	af 92       	push	r10
 18c:	bf 92       	push	r11
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	28 97       	sbiw	r28, 0x08	; 8
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	5c 01       	movw	r10, r24
 1a8:	6b 01       	movw	r12, r22
 1aa:	68 94       	set
 1ac:	ff 24       	eor	r15, r15
 1ae:	f1 f8       	bld	r15, 1
	ADC_STATUS_t stat;
	uint8_t i;
	
	for(i=0; i<2; i++)
	{
		while(!ready());
 1b0:	0e 94 a7 00 	call	0x14e	; 0x14e <ready>
 1b4:	88 23       	and	r24, r24
 1b6:	e1 f3       	breq	.-8      	; 0x1b0 <getData+0x26>
		
		dat = readAll();
 1b8:	0e 94 ae 00 	call	0x15c	; 0x15c <readAll>
		
		parse(dat, &chn, &stat, &val);
 1bc:	8e 01       	movw	r16, r28
 1be:	0f 5f       	subi	r16, 0xFF	; 255
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
 1c2:	9e 01       	movw	r18, r28
 1c4:	2a 5f       	subi	r18, 0xFA	; 250
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	ae 01       	movw	r20, r28
 1ca:	4b 5f       	subi	r20, 0xFB	; 251
 1cc:	5f 4f       	sbci	r21, 0xFF	; 255
 1ce:	0e 94 52 00 	call	0xa4	; 0xa4 <parse>
		if(chn == CH0)
 1d2:	8d 81       	ldd	r24, Y+5	; 0x05
 1d4:	81 11       	cpse	r24, r1
 1d6:	0a c0       	rjmp	.+20     	; 0x1ec <getData+0x62>
			*ch0 = val;
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	9a 81       	ldd	r25, Y+2	; 0x02
 1dc:	ab 81       	ldd	r26, Y+3	; 0x03
 1de:	bc 81       	ldd	r27, Y+4	; 0x04
 1e0:	f5 01       	movw	r30, r10
 1e2:	80 83       	st	Z, r24
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	a2 83       	std	Z+2, r26	; 0x02
 1e8:	b3 83       	std	Z+3, r27	; 0x03
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <getData+0x74>
		else
			*ch1 = val;
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	ab 81       	ldd	r26, Y+3	; 0x03
 1f2:	bc 81       	ldd	r27, Y+4	; 0x04
 1f4:	f6 01       	movw	r30, r12
 1f6:	80 83       	st	Z, r24
 1f8:	91 83       	std	Z+1, r25	; 0x01
 1fa:	a2 83       	std	Z+2, r26	; 0x02
 1fc:	b3 83       	std	Z+3, r27	; 0x03
 1fe:	fa 94       	dec	r15
	uint32_t dat, val;
	ADC_CHN_t chn;
	ADC_STATUS_t stat;
	uint8_t i;
	
	for(i=0; i<2; i++)
 200:	f1 10       	cpse	r15, r1
 202:	d6 cf       	rjmp	.-84     	; 0x1b0 <getData+0x26>
		if(chn == CH0)
			*ch0 = val;
		else
			*ch1 = val;
	}
}
 204:	28 96       	adiw	r28, 0x08	; 8
 206:	cd bf       	out	0x3d, r28	; 61
 208:	de bf       	out	0x3e, r29	; 62
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	bf 90       	pop	r11
 21a:	af 90       	pop	r10
 21c:	08 95       	ret

0000021e <setValue>:
#define GAIN_PIN 4
#define GAIN_MASK (0b111<<GAIN_PIN)

void setValue(uint8_t val)
{
	VPORTB.OUT = (VPORTB.OUT & ~GAIN_MASK) | ((val << GAIN_PIN) & GAIN_MASK);
 21e:	95 b1       	in	r25, 0x05	; 5
 220:	40 e1       	ldi	r20, 0x10	; 16
 222:	84 9f       	mul	r24, r20
 224:	90 01       	movw	r18, r0
 226:	11 24       	eor	r1, r1
 228:	20 77       	andi	r18, 0x70	; 112
 22a:	9f 78       	andi	r25, 0x8F	; 143
 22c:	92 2b       	or	r25, r18
 22e:	95 b9       	out	0x05, r25	; 5
 230:	08 95       	ret

00000232 <changeGain>:
}

void changeGain(Gain gain)
{
	switch(gain){
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	88 30       	cpi	r24, 0x08	; 8
 236:	91 05       	cpc	r25, r1
 238:	20 f5       	brcc	.+72     	; 0x282 <changeGain+0x50>
 23a:	fc 01       	movw	r30, r24
 23c:	e2 5c       	subi	r30, 0xC2	; 194
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__tablejump2__>
		case OPEN:
			setValue(0b000);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 0f 01 	call	0x21e	; 0x21e <setValue>
		break;
 24a:	08 95       	ret
		case G1:
			setValue(0b001);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 0f 01 	call	0x21e	; 0x21e <setValue>
		break;
 252:	08 95       	ret
		case G2:
			setValue(0b010);
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 0f 01 	call	0x21e	; 0x21e <setValue>
		break;
 25a:	08 95       	ret
		case G5:
			setValue(0b011);
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	0e 94 0f 01 	call	0x21e	; 0x21e <setValue>
		break;
 262:	08 95       	ret
		case G10:
			setValue(0b100);
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	0e 94 0f 01 	call	0x21e	; 0x21e <setValue>
		break;
 26a:	08 95       	ret
		case G20:
			setValue(0b101);
 26c:	85 e0       	ldi	r24, 0x05	; 5
 26e:	0e 94 0f 01 	call	0x21e	; 0x21e <setValue>
		break;
 272:	08 95       	ret
		case G50:
			setValue(0b110);
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 0f 01 	call	0x21e	; 0x21e <setValue>
		break;
 27a:	08 95       	ret
		case G100:
			setValue(0b111);
 27c:	87 e0       	ldi	r24, 0x07	; 7
 27e:	0e 94 0f 01 	call	0x21e	; 0x21e <setValue>
 282:	08 95       	ret

00000284 <main>:
#include "LTC6911.h"
#include "LTC2402.h"


int main(void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	68 97       	sbiw	r28, 0x18	; 24
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	de bf       	out	0x3e, r29	; 62
	uint32_t ch0, ch1;
	char buf[16];
	
	pinSetup();
 292:	0e 94 5d 02 	call	0x4ba	; 0x4ba <pinSetup>
	screenSetup();
 296:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <screenSetup>
	changeGain(OPEN);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 19 01 	call	0x232	; 0x232 <changeGain>

	putString("Hey !", 4, 2);
 2a0:	42 e0       	ldi	r20, 0x02	; 2
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	8b e1       	ldi	r24, 0x1B	; 27
 2a6:	97 e8       	ldi	r25, 0x87	; 135
 2a8:	0e 94 3f 02 	call	0x47e	; 0x47e <putString>

    while (1) 
    {
		getData(&ch0, &ch1);
 2ac:	be 01       	movw	r22, r28
 2ae:	6b 5f       	subi	r22, 0xFB	; 251
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	0e 94 c5 00 	call	0x18a	; 0x18a <getData>
		
		putString("       ", 0, 3);
 2ba:	43 e0       	ldi	r20, 0x03	; 3
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	81 e2       	ldi	r24, 0x21	; 33
 2c0:	97 e8       	ldi	r25, 0x87	; 135
 2c2:	0e 94 3f 02 	call	0x47e	; 0x47e <putString>
		putString("       ", 0, 4);
 2c6:	44 e0       	ldi	r20, 0x04	; 4
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	81 e2       	ldi	r24, 0x21	; 33
 2cc:	97 e8       	ldi	r25, 0x87	; 135
 2ce:	0e 94 3f 02 	call	0x47e	; 0x47e <putString>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2d2:	40 e1       	ldi	r20, 0x10	; 16
 2d4:	be 01       	movw	r22, r28
 2d6:	67 5f       	subi	r22, 0xF7	; 247
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__itoa_ncheck>
		
		itoa(ch0, buf, 16);
		putString(buf, 0, 3);
 2e2:	43 e0       	ldi	r20, 0x03	; 3
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	ce 01       	movw	r24, r28
 2e8:	09 96       	adiw	r24, 0x09	; 9
 2ea:	0e 94 3f 02 	call	0x47e	; 0x47e <putString>
 2ee:	40 e1       	ldi	r20, 0x10	; 16
 2f0:	be 01       	movw	r22, r28
 2f2:	67 5f       	subi	r22, 0xF7	; 247
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255
 2f6:	8d 81       	ldd	r24, Y+5	; 0x05
 2f8:	9e 81       	ldd	r25, Y+6	; 0x06
 2fa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__itoa_ncheck>
		itoa(ch1, buf, 16);
		putString(buf, 0, 4);
 2fe:	44 e0       	ldi	r20, 0x04	; 4
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	ce 01       	movw	r24, r28
 304:	09 96       	adiw	r24, 0x09	; 9
 306:	0e 94 3f 02 	call	0x47e	; 0x47e <putString>
 30a:	d0 cf       	rjmp	.-96     	; 0x2ac <main+0x28>

0000030c <writebyte>:
		if(i%sizeX == 0)
			setCoord(posX, (i/sizeX)+posY);
		writebyte(picture[i], DAT, TRUE);
	}
	_SET(VPORTC.OUT, CS);
}
 30c:	0b 98       	cbi	0x01, 3	; 1
 30e:	49 98       	cbi	0x09, 1	; 9
 310:	99 b1       	in	r25, 0x09	; 9
 312:	97 7f       	andi	r25, 0xF7	; 247
 314:	61 30       	cpi	r22, 0x01	; 1
 316:	11 f0       	breq	.+4      	; 0x31c <writebyte+0x10>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	01 c0       	rjmp	.+2      	; 0x31e <writebyte+0x12>
 31c:	28 e0       	ldi	r18, 0x08	; 8
 31e:	92 2b       	or	r25, r18
 320:	99 b9       	out	0x09, r25	; 9
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	e8 2f       	mov	r30, r24
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	0b 98       	cbi	0x01, 3	; 1
 32c:	91 b1       	in	r25, 0x01	; 1
 32e:	9f 01       	movw	r18, r30
 330:	06 2e       	mov	r0, r22
 332:	02 c0       	rjmp	.+4      	; 0x338 <writebyte+0x2c>
 334:	35 95       	asr	r19
 336:	27 95       	ror	r18
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <writebyte+0x28>
 33c:	21 70       	andi	r18, 0x01	; 1
 33e:	33 27       	eor	r19, r19
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	9d 7f       	andi	r25, 0xFD	; 253
 346:	29 2b       	or	r18, r25
 348:	21 b9       	out	0x01, r18	; 1
 34a:	0b 9a       	sbi	0x01, 3	; 1
 34c:	61 50       	subi	r22, 0x01	; 1
 34e:	71 09       	sbc	r23, r1
 350:	60 f7       	brcc	.-40     	; 0x32a <writebyte+0x1e>
 352:	41 11       	cpse	r20, r1
 354:	01 c0       	rjmp	.+2      	; 0x358 <writebyte+0x4c>
 356:	49 9a       	sbi	0x09, 1	; 9
 358:	08 95       	ret

0000035a <setCoord>:
 35a:	cf 93       	push	r28
 35c:	c6 2f       	mov	r28, r22
 35e:	90 ea       	ldi	r25, 0xA0	; 160
 360:	98 0f       	add	r25, r24
 362:	90 3a       	cpi	r25, 0xA0	; 160
 364:	10 f0       	brcs	.+4      	; 0x36a <setCoord+0x10>
 366:	80 68       	ori	r24, 0x80	; 128
 368:	01 c0       	rjmp	.+2      	; 0x36c <setCoord+0x12>
 36a:	80 ee       	ldi	r24, 0xE0	; 224
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 374:	88 ef       	ldi	r24, 0xF8	; 248
 376:	8c 0f       	add	r24, r28
 378:	88 3f       	cpi	r24, 0xF8	; 248
 37a:	18 f0       	brcs	.+6      	; 0x382 <setCoord+0x28>
 37c:	8c 2f       	mov	r24, r28
 37e:	80 64       	ori	r24, 0x40	; 64
 380:	01 c0       	rjmp	.+2      	; 0x384 <setCoord+0x2a>
 382:	88 e4       	ldi	r24, 0x48	; 72
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <clearLCD>:
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 ad 01 	call	0x35a	; 0x35a <setCoord>
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 3a2:	fa cf       	rjmp	.-12     	; 0x398 <clearLCD+0x8>

000003a4 <screenSetup>:
 3a4:	49 9a       	sbi	0x09, 1	; 9
 3a6:	4a 98       	cbi	0x09, 2	; 9
 3a8:	8f e9       	ldi	r24, 0x9F	; 159
 3aa:	9f e0       	ldi	r25, 0x0F	; 15
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <screenSetup+0x8>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <screenSetup+0xe>
 3b2:	00 00       	nop
 3b4:	4a 9a       	sbi	0x09, 2	; 9
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	81 e2       	ldi	r24, 0x21	; 33
 3bc:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	85 e0       	ldi	r24, 0x05	; 5
 3c6:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	85 e1       	ldi	r24, 0x15	; 21
 3d0:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	83 e9       	ldi	r24, 0x93	; 147
 3da:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	80 e2       	ldi	r24, 0x20	; 32
 3ee:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	81 e1       	ldi	r24, 0x11	; 17
 402:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	80 e8       	ldi	r24, 0x80	; 128
 40c:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	80 e4       	ldi	r24, 0x40	; 64
 416:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
 41a:	0e 94 c8 01 	call	0x390	; 0x390 <clearLCD>

0000041e <putChar>:
  
  while(*str)
    putChar(*str++, TRUE);
}
void putChar(char chr, boolean space)
{
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	f6 2e       	mov	r15, r22
 42a:	08 2f       	mov	r16, r24
 42c:	10 e0       	ldi	r17, 0x00	; 0
 42e:	00 52       	subi	r16, 0x20	; 32
 430:	11 09       	sbc	r17, r1
 432:	c8 01       	movw	r24, r16
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	08 0f       	add	r16, r24
 43e:	19 1f       	adc	r17, r25
 440:	e8 01       	movw	r28, r16
 442:	c0 5c       	subi	r28, 0xC0	; 192
 444:	da 47       	sbci	r29, 0x7A	; 122
 446:	0b 5b       	subi	r16, 0xBB	; 187
 448:	1a 47       	sbci	r17, 0x7A	; 122
  for(uint8_t i = 0; i<5; i++)
    writebyte(asciiTable[(chr-32)*5+i], DAT, TRUE);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	89 91       	ld	r24, Y+
 450:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
  while(*str)
    putChar(*str++, TRUE);
}
void putChar(char chr, boolean space)
{
  for(uint8_t i = 0; i<5; i++)
 454:	c0 17       	cp	r28, r16
 456:	d1 07       	cpc	r29, r17
 458:	c1 f7       	brne	.-16     	; 0x44a <putChar+0x2c>
    writebyte(asciiTable[(chr-32)*5+i], DAT, TRUE);
    
  if(space)
 45a:	ff 20       	and	r15, r15
 45c:	29 f0       	breq	.+10     	; 0x468 <putChar+0x4a>
    writebyte(0, DAT, FALSE);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 86 01 	call	0x30c	; 0x30c <writebyte>
    
  _SET(VPORTC.OUT, CS);
 468:	49 9a       	sbi	0x09, 1	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46a:	85 e0       	ldi	r24, 0x05	; 5
 46c:	8a 95       	dec	r24
 46e:	f1 f7       	brne	.-4      	; 0x46c <putChar+0x4e>
 470:	00 00       	nop
  _delay_us(1);
}
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	08 95       	ret

0000047e <putString>:
	}
	_SET(VPORTC.OUT, CS);
}

void putString(char *str, uint8_t posX, uint8_t posY)
{
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	ec 01       	movw	r28, r24
 484:	86 2f       	mov	r24, r22
  posX = _CLIP(0, posX, LCD_W);
 486:	90 ea       	ldi	r25, 0xA0	; 160
 488:	96 0f       	add	r25, r22
 48a:	90 3a       	cpi	r25, 0xA0	; 160
 48c:	08 f4       	brcc	.+2      	; 0x490 <putString+0x12>
 48e:	80 e6       	ldi	r24, 0x60	; 96
  posY = _CLIP(0, posY, LCD_H);
 490:	9f eb       	ldi	r25, 0xBF	; 191
 492:	94 0f       	add	r25, r20
 494:	9f 3b       	cpi	r25, 0xBF	; 191
 496:	08 f4       	brcc	.+2      	; 0x49a <putString+0x1c>
 498:	41 e4       	ldi	r20, 0x41	; 65
  setCoord(posX, posY);
 49a:	64 2f       	mov	r22, r20
 49c:	0e 94 ad 01 	call	0x35a	; 0x35a <setCoord>
  
  while(*str)
 4a0:	88 81       	ld	r24, Y
 4a2:	88 23       	and	r24, r24
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <putString+0x36>
 4a6:	21 96       	adiw	r28, 0x01	; 1
    putChar(*str++, TRUE);
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	0e 94 0f 02 	call	0x41e	; 0x41e <putChar>
{
  posX = _CLIP(0, posX, LCD_W);
  posY = _CLIP(0, posY, LCD_H);
  setCoord(posX, posY);
  
  while(*str)
 4ae:	89 91       	ld	r24, Y+
 4b0:	81 11       	cpse	r24, r1
 4b2:	fa cf       	rjmp	.-12     	; 0x4a8 <putString+0x2a>
    putChar(*str++, TRUE);
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <pinSetup>:
#include "setup.h"

void pinSetup()
{
	VPORTA.DIR = 0b01111010;
 4ba:	8a e7       	ldi	r24, 0x7A	; 122
 4bc:	80 b9       	out	0x00, r24	; 0
	VPORTB.DIR = 0b00000000;
 4be:	14 b8       	out	0x04, r1	; 4
	VPORTC.DIR = 0b00001111;
 4c0:	8f e0       	ldi	r24, 0x0F	; 15
 4c2:	88 b9       	out	0x08, r24	; 8
 4c4:	08 95       	ret

000004c6 <__tablejump2__>:
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	05 90       	lpm	r0, Z+
 4cc:	f4 91       	lpm	r31, Z
 4ce:	e0 2d       	mov	r30, r0
 4d0:	09 94       	ijmp

000004d2 <__itoa_ncheck>:
 4d2:	bb 27       	eor	r27, r27
 4d4:	4a 30       	cpi	r20, 0x0A	; 10
 4d6:	31 f4       	brne	.+12     	; 0x4e4 <__itoa_ncheck+0x12>
 4d8:	99 23       	and	r25, r25
 4da:	22 f4       	brpl	.+8      	; 0x4e4 <__itoa_ncheck+0x12>
 4dc:	bd e2       	ldi	r27, 0x2D	; 45
 4de:	90 95       	com	r25
 4e0:	81 95       	neg	r24
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__utoa_common>

000004e8 <__utoa_ncheck>:
 4e8:	bb 27       	eor	r27, r27

000004ea <__utoa_common>:
 4ea:	fb 01       	movw	r30, r22
 4ec:	55 27       	eor	r21, r21
 4ee:	aa 27       	eor	r26, r26
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	aa 1f       	adc	r26, r26
 4f6:	a4 17       	cp	r26, r20
 4f8:	10 f0       	brcs	.+4      	; 0x4fe <__utoa_common+0x14>
 4fa:	a4 1b       	sub	r26, r20
 4fc:	83 95       	inc	r24
 4fe:	50 51       	subi	r21, 0x10	; 16
 500:	b9 f7       	brne	.-18     	; 0x4f0 <__utoa_common+0x6>
 502:	a0 5d       	subi	r26, 0xD0	; 208
 504:	aa 33       	cpi	r26, 0x3A	; 58
 506:	08 f0       	brcs	.+2      	; 0x50a <__utoa_common+0x20>
 508:	a9 5d       	subi	r26, 0xD9	; 217
 50a:	a1 93       	st	Z+, r26
 50c:	00 97       	sbiw	r24, 0x00	; 0
 50e:	79 f7       	brne	.-34     	; 0x4ee <__utoa_common+0x4>
 510:	b1 11       	cpse	r27, r1
 512:	b1 93       	st	Z+, r27
 514:	11 92       	st	Z+, r1
 516:	cb 01       	movw	r24, r22
 518:	0c 94 8e 02 	jmp	0x51c	; 0x51c <strrev>

0000051c <strrev>:
 51c:	dc 01       	movw	r26, r24
 51e:	fc 01       	movw	r30, r24
 520:	67 2f       	mov	r22, r23
 522:	71 91       	ld	r23, Z+
 524:	77 23       	and	r23, r23
 526:	e1 f7       	brne	.-8      	; 0x520 <strrev+0x4>
 528:	32 97       	sbiw	r30, 0x02	; 2
 52a:	04 c0       	rjmp	.+8      	; 0x534 <strrev+0x18>
 52c:	7c 91       	ld	r23, X
 52e:	6d 93       	st	X+, r22
 530:	70 83       	st	Z, r23
 532:	62 91       	ld	r22, -Z
 534:	ae 17       	cp	r26, r30
 536:	bf 07       	cpc	r27, r31
 538:	c8 f3       	brcs	.-14     	; 0x52c <strrev+0x10>
 53a:	08 95       	ret

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
